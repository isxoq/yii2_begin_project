<?phpnamespace soft\db;use yii\data\Pagination;use yii\db\ActiveRecord;use yii\db\ActiveQuery as YiiActiveQuery;use yii\db\Expression;/** * This is the query class for ActiveRecord * * @property string $tableName */class ActiveQuery extends YiiActiveQuery{    private $_tableName;    use MultilingualQueryTrait;    /**     * @return string     */    public function getTableName()    {        if ($this->_tableName == null) {            /* @var $modelClass ActiveRecord */            $modelClass = $this->modelClass;            $this->tableName = $modelClass::tableName();        }        return $this->_tableName;    }    /**     * @param string $tableName     */    public function setTableName($tableName)    {        $this->_tableName = $tableName;    }    /**     * @return $this     */    public function active()    {        return $this->andWhere([$this->tableName . '.status' => 1]);    }    /**     * @param bool $deleted     * @return $this     */    public function deleted()    {        return $this->andWhere([$this->tableName . '.deleted' => true]);    }    /**     * @return $this     */    public function nonDeleted()    {        return $this->andWhere(['!=', $this->tableName . '.is_deleted', '1']);    }    /**     * @param int $limit     * @return $this     */    public function latest($limit = 0)    {        $this->addOrderBy([$this->tableName . '.created_at' => SORT_DESC]);        if ($limit > 0) {            $this->limit($limit);        }        return $this;    }    /**     * @param string $id     * @return $this     */    public function id($id = '')    {        return $this->andWhere([$this->tableName . '.id' => $id]);    }    /**     * @param string $id     * @return $this     */    public function notId($id = '')    {        return $this->andWhere(['!=', $this->tableName . '.id', $id]);    }    /**     * @param string $slug     * @return $this     */    public function slug(string $slug = '')    {        return $this->andWhere([$this->tableName . '.slug' => $slug]);    }    /**     * Foydalanuvchining o'ziga tegishli datani topish     * Bunda tableda user_id degan maydon bo'lishi zarur     * @return $this     */    public function own()    {        return $this->andWhere([$this->tableName . '.user_id' => user('id')]);    }    /**     * @param int $limit     * @return $this     */    public function random($limit = 0)    {        $this->orderBy(new Expression('rand()'));        if ($limit > 0) {            $this->limit($limit);        }        return $this;    }    /**     * @param $relation     * @return $this     */    public function without($relation)    {        if (!empty($this->with) && is_array($this->with)) {            foreach ($this->with as $key => $value) {                if (is_int($key)) {                    if ($relation == $value) {                        unset($this->with[$key]);                        break;                    }                } else {                    if ($relation == $key) {                        unset($this->with[$key]);                        break;                    }                }            }        }        return $this;    }}?>